name: Deploy to ECS Fargate

on:
  push:
    branches:
      - main # 배포를 트리거하는 브랜치

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          IMAGE_REPO_NAME: <ECR-Repository-Name>
          AWS_REGION: <AWS-Region>
        run: |
          IMAGE_TAG=$(git rev-parse HEAD)
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin <AWS_ACCOUNT_ID>.dkr.ecr.$AWS_REGION.amazonaws.com
          docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
          docker tag $IMAGE_REPO_NAME:$IMAGE_TAG <AWS_ACCOUNT_ID>.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          docker push <AWS_ACCOUNT_ID>.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          echo "::set-output name=image::$IMAGE_TAG"

      - name: Deploy to ECS
        env:
          AWS_REGION: <AWS-Region>
          CLUSTER_NAME: <ECS-Cluster-Name>
          SERVICE_NAME: <ECS-Service-Name>
          IMAGE_REPO_NAME: <ECR-Repository-Name>
        run: |
          IMAGE_TAG=$(git rev-parse HEAD)
          TASK_DEFINITION_JSON=$(aws ecs describe-task-definition --task-definition $IMAGE_REPO_NAME)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION_JSON | jq --arg IMAGE_URI "<AWS_ACCOUNT_ID>.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image=$IMAGE_URI | del(.status,.revision,.taskDefinitionArn)')
          echo "$NEW_TASK_DEFINITION" > new-task-definition.json
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $TASK_DEFINITION_ARN
